// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String        @unique
  password    String
  blogs       Blog[]
  favorites   String[]
  saved       String[]
  image       String?
  coverImage  String?
  Comment     Comment[]
  postComment PostComment[]
  post        Post[]
  requests    String[]
  friendList  String[]
  isOAuth     Boolean       @default(false)
}

model Blog {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  imageUrl         String
  blog_text        String
  category         String
  categoryDatabase String
  author           User     @relation(fields: [authorId], references: [id])
  authorId         String   @db.ObjectId
  likes            String[]
  date             DateTime @default(now())
  rating           Int?
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  commentText String
  likes       String[]
  postId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    String?   @db.ObjectId
  parent      Comment?  @relation("NestedComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Comment[] @relation("NestedComments")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
}

model Post {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  caption  String
  imageUrl String
  likes    String[]
  comments PostComment[]
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String        @db.ObjectId
  date     DateTime      @default(now())
}

model PostComment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  commentText String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  date        DateTime @default(now())
  likes       String[]
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  messageText String
  from        String
  to          String
  date        DateTime @default(now())
}
